# Chart of the component operator
# Format: <namespace>/<name>:<version>
# component_operator_crd_chart: "k8s/k8s-component-operator-crd:latest"
component_operator_chart: "k8s-testing/k8s-component-operator:1.0.1-dev"
# component_operator_chart: "europe-west3-docker.pkg.dev/ces-coder-workspaces/ces-test-docker-helm-repo/charts/k8s-component-operator:1.0.1"

# Components to be installed by the k8s-ces-setup.
# Mandatory components are listed below as the default. Moreover, one can specify components like k8s-ces-control or
# k8s-backup-operator.
#
# Format: <namespace>/<name>: <version>

setup:
  image:
    repository: europe-west3-docker.pkg.dev/ces-coder-workspaces/ces-test-docker-helm-repo/images/k8s-ces-setup
    tag: 1.0.1-test

components:
  # Use longhorn if your cluster has no storage provisioner.
  #  k8s-longhorn:
  #    version: latest
  #    helmRepositoryNamespace: k8s
  #    deployNamespace: longhorn-system
  k8s-etcd:
    version: latest
    helmRepositoryNamespace: k8s
  k8s-dogu-operator:
    version: 1.2.0-test
    helmRepositoryNamespace: k8s-testing
# remove dogu-crd as another ces already provides this
#  k8s-dogu-operator-crd:
#    version: latest
#    helmRepositoryNamespace: k8s
  k8s-service-discovery:
    version: latest
    helmRepositoryNamespace: k8s
%{ for component in additional_components ~}
  ${component.name}:
    version: ${component.version}
    helmRepositoryNamespace: ${component.namespace}
    deployNamespace: ${component.deployNamespace}
%{ endfor ~}
#  k8s-snapshot-controller:
#    version: latest
#    helmRepositoryNamespace: k8s
#  k8s-snapshot-controller-crd:
#    version: latest
#    helmRepositoryNamespace: k8s
#  k8s-velero:
#    version: latest
#    helmRepositoryNamespace: k8s
#  k8s-cert-manager:
#    version: latest
#    helmRepositoryNamespace: k8s
#  k8s-cert-manager-crd:
#    version: latest
#    helmRepositoryNamespace: k8s

# Image of the etcd client. This is currently used for debugging.
#etcd_client_image_repo: bitnami/etcd:3.5.2-debian-10-r0
# Image of the setup finisher job.
#kubectl_image: bitnami/kubectl:1.27.4
# Key-Provider used for en- and decryption CES-Registry values.
#key_provider: pkcs1v15
# Log-Level of the k8s-ces-setup. Valid values are INFO, WARN, DEBUG and ERROR.
#log_level: DEBUG

# JSON-Patches for resources e.g. ces-loadbalancer service created by k8s-ces-setup.
resource_patches:
${resource_patches}

# Credentials for the docker registry used by the components.
# It is mandatory to set username and the base64-encoded password.
docker_registry_secret:
  url: "${docker_registry_url}"
  username: "${docker_registry_username}"
  password: "${docker_registry_password}"

# Credentials for the dogu registry used by the components.
# It is mandatory to set username and the base64-encoded password.
dogu_registry_secret:
  url: "${dogu_registry_endpoint}"
  username: "${dogu_registry_username}"
  password: "${dogu_registry_password}"
  urlschema: "${dogu_registry_url_schema}"

# Credentials for the helm registry used by the components.
# It is mandatory to set username and the base64-encoded password.
helm_registry_secret:
  host: "${helm_registry_host}"
  schema: "${helm_registry_schema}"
  plainHttp: "${helm_registry_plain_http}"
  insecureTls: "${helm_registry_insecure_tls}"
  username: "${helm_registry_username}"
  password: "${helm_registry_password}"

# Configuration for the Cloudogu EcoSystem. If all sections are completed k8s-ces-setup will start the process immediately.
# Example:
setup_json:
  ${setup_json}
