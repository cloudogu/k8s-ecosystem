#
# The service makes the setup available via port 30080. We should switch to a LoadBalancer if we figure out how to
# solve out external IP assignment
#
apiVersion: v1
kind: Service
metadata:
  name: k8s-ces-setup
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
spec:
  type: NodePort
  ports:
    - name: setup
      port: 8080
      targetPort: setup-webui
      nodePort: 30080
  selector:
    app.kubernetes.io/name: k8s-ces-setup
---
#
# The deployment for the setup
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: k8s-ces-setup
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: k8s-ces-setup
  template:
    metadata:
      labels:
        app: k8s-ces-setup
        app.kubernetes.io/name: k8s-ces-setup
    spec:
      containers:
        - name: k8s-ces-setup
          image: "cloudogu/k8s-ces-setup:0.6.0"
          env:
            - name: GIN_MODE
              value: release
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          startupProbe:
            httpGet:
              path: /api/v1/health
              port: setup-webui
            failureThreshold: 60
            periodSeconds: 10
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/v1/health
              port: setup-webui
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/v1/health
              port: setup-webui
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: setup-webui
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: /k8s-ces-setup.yaml
              name: k8s-ces-setup-config
              subPath: k8s-ces-setup.yaml
            - mountPath: /setup.json
              name: k8s-ces-setup-json
              subPath: setup.json
      volumes:
        - configMap:
            name: k8s-ces-setup-config
          name: k8s-ces-setup-config
        - configMap:
            name: k8s-ces-setup-json
            optional: true
          name: k8s-ces-setup-json
      serviceAccountName: k8s-ces-setup
      nodeSelector:
        kubernetes.io/os: linux
---
#
# The role provides the setup with all permissions  to get, list and create new namespaces.
#
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-ces-setup
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
#
# The cluster role helps the setup to provide the dogu operator with the dogu CRD
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-ces-setup-cluster-resources
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
    # Specify these labels to grant permissions to the admin default role
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  # allow to install the dogu CRD from the dogu operator
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - patch
      - update
  - apiGroups:
      - rbac.authorization.k8s.io
    resources:
      - clusterroles
      - clusterrolebindings
    verbs:
      - "*"
  - apiGroups:
      - "*"
    resources:
      - ingressclasses
    verbs:
      - get
      - create
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-ces-setup-cluster-non-resources
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
    # Specify these labels to grant permissions to the admin default role
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
rules:
  # allow to install a metrics cluster role of the dogu operator
  # it would be more secure if this rule would be delegated from setup/dogu operator to the initial setup process
  - nonResourceURLs:
      - /metrics
    verbs:
      - create
      - patch
      - update
      - get
---
# The service account is a token mounted into our setup pod. This token is used as authentication token against the
# K8s cluster.
#
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-ces-setup
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
automountServiceAccountToken: true
---
#
# The role binding binds our role to our service account, and, thus, gives him all permission defined
# in that role.
#
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-ces-setup
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-ces-setup
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup
---
#
# The cluster role binding binds our cluster role to our service account, and, thus, gives him all permission defined
# in the cluster role.
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-ces-setup-cluster-resources
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-ces-setup-cluster-resources
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup
    namespace: 'ecosystem'
---
#
# The cluster role binding binds our cluster role to our service account, and, thus, gives him all permission defined
# in the cluster role.
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-ces-setup-cluster-non-resources
  labels:
    app: k8s-ces-setup
    app.kubernetes.io/name: k8s-ces-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-ces-setup-cluster-non-resources
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup
    namespace: 'ecosystem'
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: k8s-ces-setup-finisher
spec:
  schedule: "* * * * *"
  successfulJobsHistoryLimit: 0
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: kubectl-container
              image: bitnami/kubectl:1.23.6
              command:
                - /bin/entrypoint.sh
              volumeMounts:
                - name: cleanup-script
                  mountPath: /bin/entrypoint.sh
                  readOnly: true
                  subPath: entrypoint.sh
          restartPolicy: Never
          serviceAccountName: k8s-ces-setup-finisher
          volumes:
            - name: cleanup-script
              configMap:
                defaultMode: 0540
                name: k8s-ces-setup-cleanup-script
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-ces-setup-cleanup-script
data:
  entrypoint.sh: "#!/bin/bash\nSTATE=$(kubectl get configmap k8s-setup-config -o jsonpath='{.data.state}');\nif [[ ${STATE} == \"installed\" ]]; then \n  kubectl delete configmap k8s-ces-setup-json || true\n  kubectl delete configmap k8s-setup-config || true\n  kubectl delete deployments,services,configmaps,secrets,roles,rolebindings,serviceaccounts -l app.kubernetes.io/name=k8s-ces-setup || true\n  kubectl patch cronjob cleanup -p '{\"spec\" : {\"suspend\" : true }}'\n  kubectl delete configmap k8s-ces-setup-cleanup-script\n  kubectl delete cronjob k8s-ces-setup-finisher\n  kubectl delete serviceaccount k8s-ces-setup-finisher\n  kubectl delete rolebinding k8s-ces-setup-finisher\nelse \n  echo \"setup seems not to be installed or successfully executed\";\nfi"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: k8s-ces-setup-finisher
  labels:
    app: k8s-ces-setup-finisher
    app.kubernetes.io/name: k8s-ces-setup-finisher
rules:
  - apiGroups:
      - "*"
    resources:
      - configmaps
      - services
      - secrets
      - deployments
      - roles
      - rolebindings
      - serviceaccounts
      - cronjobs
    verbs:
      - delete
      - get
      - list
  - apiGroups:
      - "*"
    resources:
      - cronjobs
    verbs:
      - patch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8s-ces-setup-finisher
  labels:
    app: k8s-ces-setup-finisher
    app.kubernetes.io/name: k8s-ces-setup-finisher
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: k8s-ces-setup-finisher
  labels:
    app: k8s-ces-setup-finisher
    app.kubernetes.io/name: k8s-ces-setup-finisher
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: k8s-ces-setup-finisher
subjects:
  - kind: ServiceAccount
    name: k8s-ces-setup-finisher